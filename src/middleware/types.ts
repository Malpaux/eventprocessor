import { EventData, EventMiddleware } from "../types";
import Pointer from "./internal/pointer";

/** Devices that can dispatch events to the middleware chain. */
export type DeviceType = "key" | "mouse" | "touch" | "wheel";

/**
 * An abstraction of event-types to provide a uniform
 * interface for different devices, e.g. mouse/touch.
 */
export type EventType =
  | "start"
  | "move"
  | "end"
  | "up"
  | "down"
  | "press"
  | "wheel";

/**
 * An extended EventData interface.
 * Most of the pre-built middleware assumes an opinionated middleware
 * chain using this EventData.
 */
export interface RichEventData extends EventData {
  /**
   * The user-defined action this event is going to trigger.
   * This field should be generated by an event mapper or custom middleware.
   * It provides a semantical context to the event/gesture.
   */
  action?: string;

  /**
   * The name of the device that issued the currently processed event.
   * This field should be generated by the `classify` middleware.
   */
  device?: DeviceType;

  /**
   * The (abstract) type of the currently processed event.
   * This field should be generated by the `classify` middleware.
   */
  eventType?: EventType;
}

/** Middleware using the opinionated RichEventData. */
export type RichMiddleware<T = { [key: string]: any }> = EventMiddleware<
  RichEventData,
  T
>;

// eslint-disable-next-line import/prefer-default-export
export { Pointer };
export interface PointerState<ID = string> {
  pointers: { [pointerId: string]: Pointer<ID> };
}
